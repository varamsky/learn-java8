# 1st round - 21 March 2025

1. Difference between Abstract Classes and Interfaces? When to use which?
2. Implementation of Singleton class? When to use with real use-case examples?
3. Difference between String and StringBuffer?
4. Give output of this:-
  ```
  class Test {
    public static void main(String args[])  {  
        System.out.print("a");  
        
        try {  
          System.out.print("b");  
          throw new IllegalArgumentException();  
        }  
        catch (RuntimeException e){  
            System.out.print("c");  
        }  
        finally {  
            System.out.print("d");  
        }
        
        System.out.print("e"); 
    }  
}
  ```
Output :- abcde
5. Give output of this:-
```
public class InterviewTest {

    public static void main(String[] args) {
        int num = 100;
        methodOne(num);
        System.out.println(num); // 100

        MyObject obj = new MyObject();
        obj.value = 50;
        methodTwo(obj);
        System.out.println(obj.value); // 50

        methodThree(obj);
        System.out.println(obj.value); // 50
    }
    
    public static void methodOne(int n) {
        n = 200;
    }

    public static void methodTwo(MyObject o) {
        o.value = 150;
    }

    public static void methodThree(MyObject o) {
        o = new MyObject();
        o.value = 300;
    }
}


class MyObject{
    int value;
}
```
Output:- 
100
150
150
6. ArrayList vs LinkedList? Which to use when?
7. Name a few synchronized Collection classes?
8. How does concurrent HashMap handle concurrency?
9. Name a few HTTP status codes that you have used?
10. Have you done unit testing in java?
11. Solve this question:-
  // input [1,2,3,4] 
// output [24,12,8,6]
i.e., multiplication of all numbers except the current index
(SOLVED using prefix and postfix arrays)
12. Solve:-
// Input: [1,1,2,4,6,5,6,4] 
// output: 2
i.e., return the first non-recurring number else return null
(SOLVED using a LinkedHashMap because it maintains the order)

# Round 2 - 3rd April

give intro
1. What is singleton? where do you use it? write a singleton?
2. Show difference between eager and lazy loading in singleton? when to use both?
3. Shallow vs deep copy in java? write class in java and show?
4. Which stream functions have you used?
        Solve using streams :- Get the average of the length of strings = "Java”, “Python”, “C++”, “JavaScript”, “Ruby"
5. hashmap vs hashtable
6. what is linked list? How to clone a linked list?
7. what is doubly-linked list? How to clone a doubly_linked list?
8. difference between linked list and array?
9. Clone a single linked list which also has a random pointer?(used hashmaps) Can you do in O(1) space?(used the input list as hashmap)
10. Have use used microservices? why do we use them?
11. Different types of scaling? What is load balancer?

# Round 3 - 15 April

He gave his intro
I gave my intro
1. Are java variables passed by value or passed by reference?
  - I said objects are passed by reference and primitives are passed by value(CORRECT :- ALL VARIABLES ARE PASSED BY VALUE)
  - Got confused on cross question - didn't satisfy with my answer
  - ``` public class Main {

    public static void main(String[] args) {
        Employee emp = new Employee("abc");
        updateName(emp);
        System.out.println(emp.getName()); // abc
    }

    public void updateName(Employee emp){
//        emp.setName(); // content can change
        emp = new Employee("xyz"); // can't be reassigned

        // key -> value

        // hashmap key should not be mutable
        // student -> name,  roll and list<int> marks
        // immutable
        // hashCode() and equals()
        // final, contructor
    }
} ```
2. Should the hashmap key be immutable?(what do I need to do if I need to use a class as key in the hashmap) What will be issue if it is mutable?
3. How to make a class immutable? Write an immutable class.
4. Given an array of integers and a target. See if the array contains a triplet whose sum is equal to the target.
  - ```
// [4,1,2,3,5,8] // can have duplicates
// target = 10
// [2,3,5]

// O(N ^ 2)
public boolean findTriplet(int[] nums, int target){
    int size = nums.length;
    if(size < 3) return false;

    Arrays.sort(nums);
    
    for(int i=0;i<size-2;i++){
        int left = i + 1;
        int right = size-1;

        while(left < right){
            int sum = nums[i] + nums[left] + nums[right];

            if(sum == target){
                return true;
            } else if(sum < target) {
                left++;
            } else {
                right--;
            }
        }
    }
    return false;
}
```
